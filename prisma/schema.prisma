generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

/// Vtuber profile configuration - stores the main vtuber information
model VtuberProfile {
  id Int @id @default(autoincrement())

  /// Name of the vtuber
  name                  String
  /// bilibili mid of the vtuber
  mid                   String                 @unique
  /// bilibili live room id of the vtuber
  roomId                String                 @unique
  /// Meta title for SEO
  metaTitle             String
  /// Meta description for SEO
  metaDescription       String
  /// Default theme ID
  defaultThemeId        Int?                   @unique
  /// Default theme relation
  defaultTheme          Theme?                 @relation("DefaultTheme", fields: [defaultThemeId], references: [id])
  /// External links for the vtuber
  externalLinks         VtuberExternalLink[]
  /// Available themes for this vtuber
  themes                Theme[]
  /// Songs that belong to this vtuber's song list
  vtuberSongs           VtuberSong[]
  /// Live recording archives that belong to this vtuber
  liveRecordingArchives LiveRecordingArchive[]

  /// When this profile was created
  createdOn DateTime @default(now())
  /// When this profile was last updated
  updatedOn DateTime @updatedAt
}

/// Theme configuration - stores different visual themes for the vtuber
model Theme {
  id Int @id @default(autoincrement())

  /// Name of the theme
  name                String?
  /// Description of the theme
  description         String?
  /// Avatar image URL for user navigation
  avatarImagePath     String
  /// Background image URL
  backgroundImagePath String
  /// favicon image URL
  faviconImagePath    String
  /// Whether this theme is active
  isActive            Boolean @default(true)

  /// Vtuber profile that owns this theme
  vtuberProfileId   Int
  vtuberProfile     VtuberProfile  @relation(fields: [vtuberProfileId], references: [id], onDelete: Cascade)
  /// Default theme relation (reverse)
  defaultForProfile VtuberProfile? @relation("DefaultTheme")

  /// When this theme was created
  createdOn DateTime @default(now())
  /// When this theme was last updated
  updatedOn DateTime @updatedAt
}

/// External links for the vtuber (social media, etc.)
model VtuberExternalLink {
  id Int @id @default(autoincrement())

  /// Vtuber profile that owns this link
  vtuberProfileId Int
  vtuberProfile   VtuberProfile @relation(fields: [vtuberProfileId], references: [id], onDelete: Cascade)

  /// Display text for the link
  value        String
  /// Icon identifier for the link
  icon         String?
  /// URL for the link
  href         String
  /// Order for display
  displayOrder Int      @default(0)
  /// When this link was created
  createdOn    DateTime @default(now())
  /// When this link was last updated
  updatedOn    DateTime @updatedAt
}

/// Always after the prisma-client-js generator
/// Stores collected songs in the global song database shared by all vtubers
model Song {
  id             Int      @id @default(autoincrement())
  /// Title of the song
  title          String
  /// Artist of the song
  artist         String
  /// The languages of the song
  /// Note: we don't normalize the language and tags into their own enum tables because 
  /// The scale of the data is small enough that all the filtering is done in the frontend,
  /// having the model containing just the array is more convenient for the frontend as we share
  /// the same set of type definitions.
  /// If one day we need to do server-side filtering (SQL), we will revisit the design.
  lang           String[]
  /// The tags of the song
  tag            String[]
  /// Fragment of the lyrics of the song, used for fuzzy search
  lyricsFragment String?

  /// The live recordings that the song was played in
  SongOccurrenceInLive SongOccurrenceInLive[]
  /// The vtuber songs that this song has relation to, this can link to
  /// all the vtubers that have this song in their song list.
  vtuberSongs          VtuberSong[]

  /// The date the song was created (added to the database)
  createdOn DateTime @default(now())
  /// The date the song was last updated (the default value is for migration)
  updatedOn DateTime @default(now()) @updatedAt
}

/// Stores songs that a vtuber can play.
model VtuberSong {
  id Int @id @default(autoincrement())

  songId                Int                    @unique
  song                  Song                   @relation(fields: [songId], references: [id], onDelete: Cascade)
  vtuberProfileId       Int
  vtuberProfile         VtuberProfile          @relation(fields: [vtuberProfileId], references: [id], onDelete: Cascade)
  /// The song occurrences in the live that this vtuber song has relation to
  songOccurrencesInLive SongOccurrenceInLive[]

  /// B站歌切ID
  bvid          String?
  /// B站歌切发布时间 (unix seconds)
  pubdate       Int?
  /// 歌曲音频链接
  audioUrl      String?
  /// 点赞数
  numLikes      Int            @default(0)
  /// 点踩数
  numDislikes   Int            @default(0)
  /// 付费状态
  /// - null: 免费
  /// - "30SC": 30元SC
  /// - "100SC": 100元SC
  /// - "200SC": 200元SC
  /// - "1000SC": 1000元SC
  /// - "10000SC": 10000元SC
  scStatus      SuperChat?     @relation(fields: [scStatusId], references: [id])
  scStatusId    Int?
  /// Remark of the song
  remark        String?
  /// 上船当天限定
  premiumStatus PremiumStatus?
  /// Hide so not shown in the song list
  hidden        Boolean        @default(false)

  /// The date the song was added to the vtuber's song list
  createdOn DateTime @default(now())
  /// The date the song was last updated
  updatedOn DateTime @updatedAt
}

/// SuperChat definition, e.g., 30SC, 100SC, 200SC, etc.
/// Note: this is not defined as an enum because we expect this to change and add more. Postgres enum change
/// requires a DDL lock that blocks all reads and writes.
/// This is designed as an enum table instead of free-form string mainly because I need
/// to generate the corresponding Icon : )
model SuperChat {
  id          Int          @id @default(autoincrement())
  name        String
  vtuberSongs VtuberSong[]
}

/// B站大航海舰队等级
enum PremiumStatus {
  /// 舰长
  Captain
  /// 提督
  Admiral
  /// 总督
  Governor
}

model User {
  salt          String
  password_hash String
  username      String @id
}

model Footer {
  content String
  id      Int    @id @default(autoincrement())
}

/// Live recording archive. This table store metadata about every live recording
/// of the vtuber.
model LiveRecordingArchive {
  id Int @id @default(autoincrement())

  /// The vtuber that this live recording archive belongs to
  vtuberProfileId Int
  /// The vtuber that this live recording archive belongs to
  vtuberProfile   VtuberProfile @relation(fields: [vtuberProfileId], references: [id], onDelete: Cascade)

  /// B站视频ID
  bvid     String @unique
  /// Title of the live recording
  title    String
  /// Publish date of the live recording (unix seconds) (录播发布时间), this is a unix seconds because
  /// that is what the bilibili api returns.
  pubdate  Int
  /// Date of the live (直播时间). This is extracted from the title, e.g.,
  /// 【直播回放】直播 2025年1月1日12点场 -> 2025-01-01 12:00:00
  date DateTime
  /// Duration of the live recording (seconds)
  duration Int
  /// Cover image url of the recording
  cover    String

  /// The songs that were played in the live
  SongOccurrenceInLive SongOccurrenceInLive[]

  @@index([bvid, pubdate(sort: Desc)])
}

/// This is the relation table between Song and LiveRecordingArchive.
/// Each entry represents a song that was played by the vtuber in the live.
model SongOccurrenceInLive {
  /// The song that was played in the live
  song   Song @relation(fields: [songId], references: [id], onDelete: Cascade)
  /// The id of the song that was played in the live
  songId Int

  /// The vtuber song that was played in the live
  vtuberSongId Int
  vtuberSong   VtuberSong @relation(fields: [vtuberSongId], references: [id], onDelete: Cascade)

  /// The live recording archive that the song was played in
  liveRecordingArchive   LiveRecordingArchive @relation(fields: [liveRecordingArchiveId], references: [id], onDelete: Cascade)
  /// The id of the live recording archive that the song was played in
  liveRecordingArchiveId Int

  /// The start time of the song in the live (seconds since the start of the live)
  start Int
  /// The page number of the live recording (1-indexed), refer to B站分P视频
  page  Int

  @@id([vtuberSongId, liveRecordingArchiveId])
}
